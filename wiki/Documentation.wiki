#summary A short documentation of our implementation of a solution for the UVA Primes Problem.

= Introduction =

A restatement of the problem is given here, copied directly from the problem description page.

_The input contains one integer number N (N<=10000000) in every line. This is the number you will have to express as a summation of four primes. Input is terminated by end of file._

Our solution implements the basic format that was discussed in class, which is as follows.

= Solution Description =

1. First, we observe the following properties of addition:

     * Even + Even = Even
     * Even + Odd = Odd
     * Odd + Odd = Even

We know that every prime is odd, with the exception of 2. So, in order to have two primes sum up to any number, the number must be an even number, which is to say that its summands must both be even or odd, and for our purposes, we choose odd.

2. To do this, we first consider the smallest primes, 2 and 3. If a number is even, if we subtract even numbers from it, we get an even. For an odd, we must subtract from it an odd number.

This gives us the general rule: for an even number, set the first two summands of the final summation to 2, and if odd, set the first summand to 2 and the second summand to 3.

This gives us an even number, from which we can get the last two summands per (1).

3. In order to do this, we walk through a list of known primes, testing the difference between the number and the 3 chosen summands for primality.

= Primality =
In order to speed up the testing of primality, we keep a list of primes up to sqrt(n), n being the maximum input. In this problem specification, we have that n = 10,000,000, so sqrt(n) ~ 3162, thus we need to keep all primes up to 3162.

We go beyond that, however, and also keep a boolean array that holds the primality of each number. We choose to represent this as a bit vector in an array of unsigned ints, giving us 32x the primes we can hold in a regular C++ boolean array.

These improvements give us a drastic speedup in execution time (.064s -> .016s).